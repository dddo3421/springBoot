<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "https://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!-- 아래 mapper에서 IBookDAO 추상메소드들 기능 구현-->	
<mapper namespace="com.spring_boot.book.dao.IBookDAO">
	
	<!-- 태그 관련 속성 : id= 태그 고유 식별자(id가 추상메소드 명과 동일해야 함)
						  parameterType=쿼리에 전달할 파라미터 객체의 타입을 지정
						  resultType=반환결과가 필요한 경우 자바 객체의 타입 지정
						  resultMap=결과를 매핑하기위한 외부 결과 맵 참조(개발자가 구성해야 함) 반환되는 rs의 컬럼, 저장해야하는 vo 클래스의 필드명 매핑
						  statementType= stmt 객체 유형 지정(기본값 prepared)
	 -->
	<!-- resultMap 구성 -->
	<resultMap id="bookResult" type="com.spring_boot.book.model.BookVO">
		<result property="bookNo" column="bookNo"/>
		<result property="bookName" column="bookName"/>
		<result property="bookAuthor" column="bookAuthor"/>
		<result property="bookPrice" column="bookPrice"/>
		<result property="bookDate" column="bookDate"/>
		<result property="bookStock" column="bookStock"/>
		<result property="pubNo" column="pubNo"/>
	</resultMap>
		 
	<!-- 전체 도서 조회 -->
	<select id="listAllBook" resultMap="bookResult">
		SELECT * FROM book ORDER BY bookNo
	</select>
	
	<!-- 변수자리에 사용할 수 있는 기호 : #{필드명/변수명}, ${필드명/변수명} 
		 #{} : preparedstatement의 ?
		 ${} : statement의 변수
	-->
	<!-- 도서 등록 -->
	<insert id="insertBook" parameterType="com.spring_boot.book.model.BookVO">
		INSERT INTO book (bookNo, bookName, bookAuthor, bookPrice, bookDate, bookStock, pubNo)
		VALUES (#{bookNo}, #{bookName}, #{bookAuthor}, #{bookPrice}, #{bookDate}, #{bookStock}, #{pubNo})	
	</insert>
	
	<!-- 도서 상세정보 조회 -->
	<select id="detailViewBook" parameterType="String" resultType="com.spring_boot.book.model.BookVO">
		SELECT * FROM book WHERE bookNo = #{bookNo}
	</select>
	
	<!-- 도서 정보 수정 -->
	<update id="updateBook" parameterType="com.spring_boot.book.model.BookVO">
	    UPDATE book
	    SET bookName = #{bookName},
	        bookAuthor = #{bookAuthor},
	        bookPrice = #{bookPrice},
	        bookDate = #{bookDate},
	        bookStock = #{bookStock},
	        pubNo = #{pubNo}
	    WHERE bookNo = #{bookNo}
	</update>
	
	<!-- 도서 정보 삭제 -->
	<delete id="deleteBook" parameterType="string">
		DELETE FROM book WHERE bookNo=#{bookNo}
	</delete>
	
	<!-- 도서번호 중복확인 -->
	<select id="bookNoCheck" resultType="string" parameterType="string">
		SELECT bookNo FROM book where bookNo=#{bookNo}
	</select>
	
	<!-- 도서 검색 
		검색기준 : type:bookName, type:pubNo
			if 문을 표현하는 mybatis 태그 <choose><when>
		검색어 : keyword:사용자입력값
	-->
	<select id="bookSearch" parameterType="hashmap" resultMap="bookResult">
		select * from book where
			<choose>
					<when test="type != null and type.equals('bookName')">
						bookName like '%'||#{keyword}||'%'
					</when>
					<when test="type != null and type.equals('pubNo')">
						pubNo like '%'||#{keyword}||'%'
					</when>
			</choose>
	</select>
</mapper>
